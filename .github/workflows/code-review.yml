name: Gemini AI Code Review

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR Diff
        id: get_diff
        run: |
          set -eo pipefail # 如果任何指令失敗，立即終止

          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          
          echo "Comparing commits: $BASE_SHA...$HEAD_SHA"

          DIFF_CONTENT=$(git diff $BASE_SHA $HEAD_SHA)

          if [ -z "$DIFF_CONTENT" ]; then
            echo "No changes detected."
            echo "diff_json=null" >> $GITHUB_OUTPUT
          else
            echo "diff_json=$(echo "$DIFF_CONTENT" | jq -Rs .)" >> $GITHUB_OUTPUT
          fi

      - name: Call Gemini API for Code Review
        id: gemini_review
        if: steps.get_diff.outputs.diff_json != 'null'
        run: |
          set -eo pipefail
          
          # 1. 使用 heredoc 將 prompt 模板安全地存入一個變數
          # 這種方法對於多行文字和特殊字元非常安全
          PROMPT_TEMPLATE=$(cat <<'EOF'
          Please act as a senior software engineer. Review the following code changes (git diff format) and provide constructive feedback. Focus on code quality, potential bugs, style consistency, and best practices. If there are no major issues, confirm that the code looks good. Here is the diff:
          
          EOF
          )
          
          # 2. 從上一步的輸出中獲取 JSON 格式的 diff 內容
          DIFF_CONTENT_JSON=${{ steps.get_diff.outputs.diff_json }}
          
          # 3. 使用 --arg 和 --argjson 將模板和 diff 作為參數傳遞給 jq
          #    --arg:      將後續內容視為普通字串
          #    --argjson:  將後續內容視為已格式化好的 JSON
          # 這樣 jq 程式碼本身就非常乾淨，只負責拼接變數
          JSON_PAYLOAD=$(jq -n \
            --arg template "$PROMPT_TEMPLATE" \
            --argjson diff "$DIFF_CONTENT_JSON" \
            '{
              "contents": [
                {
                  "parts": [
                    {
                      "text": ($template + $diff)
                    }
                  ]
                }
              ]
            }')
          
          # 4. 呼叫 Gemini API (與之前相同)
          API_RESPONSE=$(curl --fail -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          
          # 5. 解析回應 (與之前相同)
          REVIEW_COMMENT=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "Error: Could not parse Gemini response."')
          
          # 6. 儲存輸出 (與之前相同)
          echo "review_comment<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_COMMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post Review Comment to PR
        if: steps.gemini_review.outputs.review_comment != ''
        uses: actions/github-script@v7
        with:
          script: |
            const review_body = `### 🤖 Gemini AI Code Review\n\n${{ steps.gemini_review.outputs.review_comment }}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: review_body
            });