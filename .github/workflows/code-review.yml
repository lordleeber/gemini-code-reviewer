name: Gemini AI Code Review

on:
  pull_request:
    types: [opened, synchronize] # 當 PR 被開啟或更新時觸發
    branches:
      - main # 只針對指向 main 分支的 PR

permissions:
  contents: read
  pull-requests: write # 賦予寫入 PR 留言的權限

jobs:
  code-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 獲取所有 git 歷史，以便比較分支

      - name: Get PR Diff
        id: get_diff
        run: |
          # 取得 Pull Request 的 base 和 head commit SHA
          BASE_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ github.event.pull_request.url }} | jq -r .base.sha)
          HEAD_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" ${{ github.event.pull_request.url }} | jq -r .head.sha)
          
          echo "Base SHA: $BASE_SHA"
          echo "Head SHA: $HEAD_SHA"

          # 產生 diff 並儲存到輸出變數
          DIFF=$(git diff $BASE_SHA $HEAD_SHA)
          if [ -z "$DIFF" ]; then
            echo "No changes detected."
            echo "diff_content=No changes to review." >> $GITHUB_OUTPUT
          else
            # 將 diff 內容轉換為適合 JSON 的格式
            DIFF=$(echo "$DIFF" | jq -Rs .)
            echo "diff_content=$DIFF" >> $GITHUB_OUTPUT
          fi

      - name: Call Gemini API for Code Review
        id: gemini_review
        if: steps.get_diff.outputs.diff_content != 'No changes to review.' # 如果有變更才執行
        run: |
          PROMPT="Please act as a senior software engineer. Review the following code changes (git diff format) and provide constructive feedback. Focus on code quality, potential bugs, style consistency, and best practices. If there are no major issues, confirm that the code looks good. Here is the diff:\n\n${{ steps.get_diff.outputs.diff_content }}"

          # 建立 JSON payload
          JSON_PAYLOAD=$(jq -n --arg prompt "$PROMPT" \
            '{ "contents": [ { "parts": [ { "text": $prompt } ] } ] }')

          # 呼叫 Gemini API
          API_RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          
          # 檢查是否有錯誤
          if echo "$API_RESPONSE" | jq -e '.error' > /dev/null; then
            echo "Error from Gemini API:"
            echo "$API_RESPONSE"
            REVIEW_COMMENT="Error processing code review by Gemini."
          else
            # 解析回應並提取 review 內容
            REVIEW_COMMENT=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          fi

          # 將 review 留言儲存到 GitHub 的輸出變數中，以便後續步驟使用
          echo "review_comment<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_COMMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post Review Comment to PR
        if: steps.gemini_review.outputs.review_comment != '' # 如果有 review 內容才留言
        uses: actions/github-script@v7
        with:
          script: |
            const review_body = `### 🤖 Gemini AI Code Review\n\n${{ steps.gemini_review.outputs.review_comment }}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: review_body
            });
