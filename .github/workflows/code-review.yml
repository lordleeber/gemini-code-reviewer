name: Gemini AI Code Review

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR Diff
        id: get_diff
        run: |
          set -eo pipefail
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          
          DIFF_CONTENT=$(git diff $BASE_SHA $HEAD_SHA)

          if [ -z "$DIFF_CONTENT" ]; then
            echo "diff_content=null" >> $GITHUB_OUTPUT
          else
            echo 'diff_content<<EOF' >> $GITHUB_OUTPUT
            echo "$DIFF_CONTENT" >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          fi

      # ================== 核心修正 Part 1 ==================
      - name: Run AI Code Review Script
        id: gemini_review
        if: steps.get_diff.outputs.diff_content != 'null'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_DIFF: ${{ steps.get_diff.outputs.diff_content }}
        run: |
          set -eo pipefail
          pip install requests
          
          # 1. 執行 Python 腳本，並將其所有輸出 (stdout 和 stderr) 捕捉到一個 Shell 變數中
          REVIEW_TEXT=$(python .github/scripts/review.py 2>&1)
          
          # 2. 將捕捉到的內容，明確地寫入到一個名為 "review_comment" 的輸出變數中
          echo 'review_comment<<EOF' >> $GITHUB_OUTPUT
          echo "$REVIEW_TEXT" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      # ================== 核心修正 Part 2 ==================
      - name: Post Review Comment to PR
        if: steps.gemini_review.outputs.review_comment != ''
        uses: actions/github-script@v7
        with:
          script: |
            const review_body = `### 🤖 Gemini AI Code Review\n\n${inputs.review_comment}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: review_body
            });
          inputs:
            review_comment: ${{ steps.gemini_review.outputs.review_comment }}