name: Gemini AI Code Review

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR Diff
        id: get_diff
        run: |
          set -eo pipefail # Â¶ÇÊûú‰ªª‰ΩïÊåá‰ª§Â§±ÊïóÔºåÁ´ãÂç≥ÁµÇÊ≠¢

          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          
          echo "Comparing commits: $BASE_SHA...$HEAD_SHA"

          DIFF_CONTENT=$(git diff $BASE_SHA $HEAD_SHA)

          if [ -z "$DIFF_CONTENT" ]; then
            echo "No changes detected."
            echo "diff_json=null" >> $GITHUB_OUTPUT
          else
            echo "diff_json=$(echo "$DIFF_CONTENT" | jq -Rs .)" >> $GITHUB_OUTPUT
          fi

      - name: Call Gemini API for Code Review
        id: gemini_review
        if: steps.get_diff.outputs.diff_json != 'null'
        run: |
          set -eo pipefail # Â¶ÇÊûú‰ªª‰ΩïÊåá‰ª§Â§±ÊïóÔºåÁ´ãÂç≥ÁµÇÊ≠¢

          DIFF_CONTENT_JSON=${{ steps.get_diff.outputs.diff_json }}

          JSON_PAYLOAD=$(jq -n \
            --arg diff_content "$DIFF_CONTENT_JSON" \
            '{
              "contents": [
                {
                  "parts": [
                    {
                      "text": "Please act as a senior software engineer. Review the following code changes (git diff format) and provide constructive feedback. Focus on code quality, potential bugs, style consistency, and best practices. If there are no major issues, confirm that the code looks good. Here is the diff:\n\n\(.diff_content)"
                    }
                  ]
                }
              ]
            }')

          API_RESPONSE=$(curl --fail -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          
          REVIEW_COMMENT=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "Error: Could not parse Gemini response."')
          
          echo "review_comment<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_COMMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post Review Comment to PR
        if: steps.gemini_review.outputs.review_comment != ''
        uses: actions/github-script@v7
        with:
          script: |
            const review_body = `### ü§ñ Gemini AI Code Review\n\n${{ steps.gemini_review.outputs.review_comment }}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: review_body
            });